# Docker Compose for Super-linter API Development
version: '3.8'

services:
  # Main API service
  super-linter-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: super-linter-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - PORT=3000
      - DATABASE_PATH=/app/data/super-linter-api.db
      - RUN_MIGRATIONS=true
      - MAX_CONCURRENT_JOBS=3
      - JOB_TIMEOUT_MS=60000
      - WORKSPACE_CLEANUP_INTERVAL_MS=1800000
      - ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      # Persistent database storage
      - ./data:/app/data
      # Persistent logs
      - ./logs:/app/logs
      # Development: Mount source for hot reload (optional)
      # - ./src:/app/src:ro
      # - ./tests:/app/tests:ro
    networks:
      - super-linter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.super-linter-api.rule=Host(\`localhost\`)"
      - "traefik.http.services.super-linter-api.loadbalancer.server.port=3000"

  # Development hot-reload service (alternative to main service)
  super-linter-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: super-linter-api-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - PORT=3000
    volumes:
      - .:/app
      - /app/node_modules
      - ./data:/app/data
    networks:
      - super-linter-network
    command: ["pnpm", "dev"]
    profiles:
      - dev
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: super-linter-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - super-linter-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: super-linter-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - super-linter-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Redis for advanced caching (optional)
  redis:
    image: redis:7-alpine
    container_name: super-linter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - super-linter-network
    restart: unless-stopped
    profiles:
      - caching
    command: redis-server --appendonly yes

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: super-linter-test
    environment:
      - NODE_ENV=test
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - super-linter-network
    command: ["pnpm", "test"]
    profiles:
      - test

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  super-linter-network:
    driver: bridge