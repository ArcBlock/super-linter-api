name: Security Scan

on:
  # schedule:
    # Run security scans daily at 6 AM UTC
    # - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - docker

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.6.5'

jobs:
  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event_name == 'schedule' }}

    permissions:
      security-events: write
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run npm audit
        run: |
          pnpm audit --json --prod > audit-results.json || true

      - name: 🔒 Run Snyk dependency scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json --file=package.json
          json: true

      - name: 🔒 Upload Snyk results to GitHub
        if: env.SNYK_TOKEN
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: 📊 Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            audit-results.json
            snyk.sarif

  code-scan:
    name: 🔍 Code Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event_name == 'schedule' }}

    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: 🔒 Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

      - name: 🔒 Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/nodejs
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  docker-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'docker' || github.event.inputs.scan_type == 'full' || github.event_name == 'schedule' }}

    strategy:
      matrix:
        dockerfile: ['Dockerfile']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker image for scanning
        run: |
          IMAGE_NAME="super-linter-api-scan:latest"
          docker build -f ${{ matrix.dockerfile }} -t $IMAGE_NAME .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 🔒 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 Run Snyk Docker scan
        if: env.SNYK_TOKEN
        run: |
          # Install Snyk CLI
          npm install -g snyk

          # Scan Docker image
          snyk container test ${{ env.IMAGE_NAME }} \
            --json --severity-threshold=high \
            --exclude-base-image-vulns > snyk-docker-results.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 🔒 Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: 📊 Upload Docker scan results
        uses: actions/upload-artifact@v4
        with:
          name: docker-scan-results-${{ matrix.dockerfile }}
          path: |
            trivy-results.sarif
            snyk-docker-results.json
            hadolint-results.sarif

  secrets-scan:
    name: 🔐 Secrets Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event_name == 'schedule' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for secret scanning

      - name: 🔐 Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 🔐 Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event_name == 'schedule' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Run Checkov (IaC scanner)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_configuration
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 📊 Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, docker-scan, secrets-scan, infrastructure-scan]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: security-results/

      - name: 📊 Generate security report
        run: |
          mkdir -p reports

          # Create a comprehensive security report
          cat > reports/security-report.md << 'EOF'
          # Security Scan Report

          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}

          ## Scan Results Summary

          | Scan Type | Status | Critical | High | Medium | Low |
          |-----------|--------|----------|------|--------|-----|
          | Dependencies | ${{ needs.dependency-scan.result }} | - | - | - | - |
          | Code Analysis | ${{ needs.code-scan.result }} | - | - | - | - |
          | Docker Images | ${{ needs.docker-scan.result }} | - | - | - | - |
          | Secrets | ${{ needs.secrets-scan.result }} | - | - | - | - |
          | Infrastructure | ${{ needs.infrastructure-scan.result }} | - | - | - | - |

          ## Recommendations

          1. **Dependencies**: Keep all dependencies updated to latest secure versions
          2. **Code**: Address all critical and high severity code issues
          3. **Docker**: Use minimal base images and scan regularly
          4. **Secrets**: Never commit secrets to version control
          5. **Infrastructure**: Follow security best practices for deployment

          ## Next Steps

          - [ ] Review and address critical/high severity vulnerabilities
          - [ ] Update security policies if needed
          - [ ] Schedule follow-up scans
          - [ ] Document any accepted risks

          EOF

      - name: 📊 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: reports/

      - name: 📧 Notify security team
        if: ${{ needs.dependency-scan.result == 'failure' || needs.code-scan.result == 'failure' || needs.docker-scan.result == 'failure' || needs.secrets-scan.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 **Security Scan Alert** 🚨

            High/Critical security issues detected in ${{ github.repository }}

            **Failed Scans:**
            • Dependencies: ${{ needs.dependency-scan.result }}
            • Code Analysis: ${{ needs.code-scan.result }}
            • Docker Images: ${{ needs.docker-scan.result }}
            • Secrets: ${{ needs.secrets-scan.result }}
            • Infrastructure: ${{ needs.infrastructure-scan.result }}

            **Action Required:** Please review and address security issues immediately.

            [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
